name: Go Microservices CI/CD

on:
  push:
    branches:
      - main
      - ci/cd
      - develop
  pull_request:
    branches:
      - main

jobs:
  build-test-lint-sonar:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    services:
      mongo:
        image: mongo:7
        ports:
          - 27017:27017
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      # --------- Checkout code ---------
      - name: Checkout repository
        uses: actions/checkout@v3

      # --------- Setup Go ---------
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24
          cache: true

      # --------- Install tools ---------
      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.4.0

      # --------- Run auth-service linters ---------
      - name: Run golangci-lint auth-service
        run: |
          cd auth-service
          golangci-lint run ./...

      # --------- Run content-service linters ---------
      - name: Run golangci-lint content-service
        run: |
          cd content-service
          golangci-lint run ./...

      # --------- Run ia-service linters ---------
      - name: Run golangci-lint ia-service
        run: |
          cd ia-service
          golangci-lint run ./...

      # --------- Run content-service linters ---------
      - name: Run golangci-lint payment-service
        run: |
          cd payment-service
          golangci-lint run ./...

      # --------- Run progress-service linters ---------
      - name: Run golangci-lint progress-service
        run: |
          cd progress-service
          golangci-lint run ./...

      # --------- Run unit and integration tests auth-service ---------
      - name: Run tests auth-service
        run: |
          cd auth-service
          go test ./tests/... -coverpkg=./internal/... -coverprofile=coverage.out

      # --------- Run unit and integration tests content-service ---------
      - name: Run tests content-service
        run: |
          cd content-service
          go test ./tests/... -coverpkg=./internal/... -coverprofile=coverage.out

      # --------- Run unit and integration tests ia-service ---------
      - name: Run tests ia-service
        run: |
          cd ia-service
          go test ./tests/... -coverpkg=./internal/... -coverprofile=coverage.out

      # --------- Run unit and integration tests payment-service ---------
      - name: Run tests payment-service
        run: |
          cd payment-service
          go test ./tests/... -coverpkg=./internal/... -coverprofile=coverage.out

      # --------- Run unit and integration tests progress-service ---------
      - name: Run tests progress-service
        run: |
          cd progress-service
          go test ./tests/... -coverpkg=./internal/... -coverprofile=coverage.out

      # --------- Run unit and integration tests ---------
      - name: Concatenate all coverage tests
        run: |
          go install github.com/wadey/gocovmerge@latest
          gocovmerge auth-service/coverage.out content-service/coverage.out ia-service/coverage.out payment-service/coverage.out progress-service/coverage.out > coverage.out

      - name: Ensure test folders exist
        run: |
          mkdir -p auth-service/tests/unit auth-service/tests/integration auth-service/tests/e2e
          mkdir -p content-service/tests/unit content-service/tests/integration content-service/tests/e2e
          mkdir -p ia-service/tests/unit ia-service/tests/integration ia-service/tests/e2e
          mkdir -p payment-service/tests/unit payment-service/tests/integration payment-service/tests/e2e
          mkdir -p progress-service/tests/unit progress-service/tests/integration progress-service/tests/e2e

      - name: SonarQube Analysis
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}

      # --------- Build Docker images ---------
      - name: Build Docker images
        run: |
          docker compose -f docker-compose.yaml build --parallel

      # Optionnel : push images si CI/CD production
      # - name: Push Docker images
      #   run: |
      #     docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
      #     docker-compose -f docker-compose.yml push
